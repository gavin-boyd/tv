//@version=5
indicator('Gavins Indicator ', overlay=false)


//### HIGHER HIGH LOWER LOW

lb = 5
rb = 5
showsupres = false
supcol = #000000
rescol = #000000
srlinestyle = line.style_solid
srlinewidth = 3
changebarcol = true
bcolup = #FFFFFF
bcoldn = #000000

ph = ta.pivothigh(lb, rb)
pl = ta.pivotlow(lb, rb)

ho = pl ? -1 : na
hl = ph ? 1 : ho // Trend direction
zo = pl ? pl : na
zz = ph ? ph : zo // similar to zigzag but may have multiple highs/lows
zz := pl and hl == -1 and ta.valuewhen(hl, hl, 1) == -1 and pl > ta.valuewhen(zz, zz, 1) ?  na : zz
zz := ph and hl == 1  and ta.valuewhen(hl, hl, 1) == 1  and ph < ta.valuewhen(zz, zz, 1) ? na : zz

hl := hl==-1 and ta.valuewhen(hl, hl, 1)==1 and zz > ta.valuewhen(zz, zz, 1) ? na : hl
hl := hl==1 and ta.valuewhen(hl, hl, 1)==-1 and zz < ta.valuewhen(zz, zz, 1) ? na : hl
zz := na(hl) ? na : zz

findprevious()=>  // finds previous three points (b, c, d, e)
    ehl = hl==1 ? -1 : 1
    loc1 = 0.0, loc2 = 0.0, loc3 = 0.0, loc4 = 0.0
    xx = 0
    for x=1 to 1000
        if hl[x]==ehl and not na(zz[x])
            loc1 := zz[x]
            xx := x + 1
            break
    ehl := hl
    for x=xx to 1000
        if hl[x]==ehl and not na(zz[x])
            loc2 := zz[x]
            xx := x + 1
            break
    ehl := hl==1 ? -1 : 1
    for x=xx to 1000
        if hl[x]==ehl and not na(zz[x])
            loc3 := zz[x]
            xx := x + 1
            break
    ehl := hl
    for x=xx to 1000
        if hl[x]==ehl and not na(zz[x])
            loc4 := zz[x]
            break
    [loc1, loc2, loc3, loc4]

float a = na, float b = na, float c = na, float d = na, float e = na
if not na(hl)
    [loc1, loc2, loc3, loc4] = findprevious()
    a := zz 
    b := loc1
    c := loc2
    d := loc3
    e := loc4

_hh = zz and (a > b and a > c and c > b and c > d)
_ll = zz and (a < b and a < c and c < b and c < d)
_hl = zz and ((a >= c and (b > c and b > d and d > c and d > e)) or (a < b and a > c and b < d))
_lh = zz and ((a <= c and (b < c and b < d and d < c and d < e)) or (a > b and a < c and b > d))

plotshape(_hl, text="HL", title="Higher Low", style=shape.labelup, color=#EEEEEE, textcolor=#000000, location=location.belowbar, offset = -rb)
plotshape(_hh, text="HH", title="Higher High", style=shape.labeldown, color=#EEEEEE, textcolor=#000000, location=location.abovebar, offset = -rb)
plotshape(_ll, text="LL", title="Lower Low", style=shape.labelup, color=#000000, textcolor=color.white, location=location.belowbar, offset = -rb)
plotshape(_lh, text="LH", title="Lower High", style=shape.labeldown, color=#000000, textcolor=color.white, location=location.abovebar, offset = -rb)

float res = na, float sup = na
res := _lh ? zz : res[1]
sup := _hl ? zz : sup[1]

int trend = na
trendo = close < sup ? -1 : nz(trend[1])
trend := close > res ? 1 : trendo

res := (trend == 1 and _hh) or (trend == -1 and _lh) ? zz : res
sup := (trend == 1 and _hl) or (trend == -1 and _ll) ? zz : sup
rechange = res != res[1]
suchange = sup != sup[1]

var line resline = na
var line supline = na
if showsupres
    if rechange
        line.set_x2(resline, bar_index)
        line.set_extend(resline, extend = extend.none)
        resline := line.new(x1 = bar_index - rb, y1 = res, x2 = bar_index, y2 = res, color = rescol, extend = extend.right, style = srlinestyle, width = srlinewidth)
     
    if suchange
        line.set_x2(supline, bar_index)
        line.set_extend(supline, extend = extend.none)
        supline := line.new(x1 = bar_index - rb, y1 = sup, x2 = bar_index, y2 = sup, color = supcol, extend = extend.right, style = srlinestyle, width = srlinewidth)    

bcolorx = trend == 1 ? bcolup : bcoldn
bcoloro = changebarcol ? bcolorx : na
barcolor(color = bcoloro)



//### PREVIOUS DAY HIGH AND LOW

condition = not(timeframe.isweekly or timeframe.ismonthly) 
h = request.security(syminfo.tickerid,"D",high,barmerge.gaps_off,barmerge.lookahead_on) 
l = request.security(syminfo.tickerid,"D",low,barmerge.gaps_off,barmerge.lookahead_on)
//plotshape(series = h[1], title = "Previous high",color = #0E6720,location=location.absolute ,transp=0,editable = true)
//plotshape(series = l[1], title = "Previous low",color =#AF0D26,location = location.absolute ,transp=0, editable = true)
// Draw lines from the previous highs and lows
newSession = ta.change(time('D'))
count = ta.barssince(newSession)
var line PrevHigh = na
var line PrevLow = na
if (newSession)
    PrevHigh := line.new(x1=bar_index, y1=h[1], x2=bar_index, y2=h[1], color=#CCCCCC,width = 5)
    PrevLow  := line.new(x1=bar_index,y1=l[1], x2=bar_index,y2=l[1],color=#CCCCCC,width = 5)
   // line.delete(id = PrevHigh[1])
   // line.delete(id = PrevLow[1]) 
if (not barstate.islast)
    line.set_x2(id= PrevHigh, x=bar_index)
    line.set_x2(id= PrevLow, x=bar_index)
else
    line.set_xloc(id=PrevHigh, x1=time[count + 1], x2=time_close + (1 * 86400000), xloc=xloc.bar_time)
    line.set_xloc(id=PrevLow, x1=time[count + 1], x2=time_close + (1 * 86400000), xloc=xloc.bar_time)
    
    
    
    
//### SWING FAILURE PATTERNS - SFP

//if (close[1] > open[1] and close[2] > open[2] and high[1] - close[1] > close[1] - open[1] and (close[1] - open[1]) < (high[1] - open[1]) * 3 and volume[1] > volume[4] and close < open and close < open[1])
//    label.new(bar_index, high, style=label.style_label_down, text='SF / ' + f_get_volume_string(volume)[1] + ' / ' + f_get_volume_string(volume), textcolor=color.white)




//### SIGNALS

hlcVwap = ta.vwap(hlc3)
f_get_volume_string(_volume) =>
    string _volume_string = na
    if _volume >= 1000000000
        _volume_digits = math.round((_volume / 1000000000) * 100) / 100
        _volume_string := str.tostring(_volume_digits) + "B"
    else if _volume >= 1000000
        _volume_digits = math.round((_volume / 1000000) * 100) / 100
        _volume_string := str.tostring(_volume_digits) + "M"
    else if _volume >= 1000
        _volume_digits = math.round((_volume / 1000) * 100) / 100
        _volume_string := str.tostring(_volume_digits) + "K"
    else
        _volume_string := str.tostring(math.round(_volume * 100) / 100)
    _volume_string
hiLen = 55
hiLen2 = 8
loLen = 20
loLen2 = 55
hiHighs = ta.highest(high, hiLen)[1]
loLows  = ta.lowest(low, loLen)[2]
//plot(series=hiHighs, color=color.black, linewidth=1)
//plot(series=loLows, color=color.black, linewidth=1)
bgColour = color.white
//candleVol = f_get_volume_string(volume)[1] + ' / ' + f_get_volume_string(volume)[0]
candleVol = ""


//_hh = zz and (a > b and a > c and c > b and c > d)
//_ll = zz and (a < b and a < c and c < b and c < d)
//_hl = zz and ((a >= c and (b > c and b > d and d > c and d > e)) or (a < b and a > c and b < d))
//_lh = zz and ((a <= c and (b < c and b < d and d < c and d < e)) or (a > b and a < c and b > d))

if (high > hiHighs or low < loLows)
    //sell signal
    if (high > hiHighs and close > hlcVwap)
        if (close < open)
            label.new(bar_index, high, style=label.style_none,text=candleVol,textcolor=color.red)
            bgColour := color.red
            alert("Short")
    //buy signal   
    if (low < loLows and close < hlcVwap)
        if (close > open and low > low[1] and high < open[1] and open - low < close[1] - low[1])
            label.new(bar_index, low, style=label.style_none,text=candleVol,textcolor=color.green)
            alert("Long")
            if ((high[1] - open[1]) * 2 < close[1] - low[1])
                bgColour := color.green
            else
                bgColour := color.yellow
//else
//    if (volume - volume[1]) > 0
//        label.new(bar_index, high, style=label.style_none,text=f_get_volume_string(volume),textcolor=#cccccc)
//    else
//        label.new(bar_index, high, style=label.style_none,text=f_get_volume_string(volume),textcolor=#000000)
bgcolor(color=bgColour, transp=40)










